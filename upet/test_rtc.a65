

test_up_rtc:
	; ----------------------------------
	; Micro-PET RTC 
	;
	; This test probes the RTC chip on the Micro-PET.
	; The test uses two bytes of the SRAM (which are
	; saved and restored), and the 1/100 counter to
	; check the clock.
	;
	.(

SPICTRL	=$e808
SPIDATA	=$e809
SPIPEEK	=$e80a

READ	=%00010011	; read RTCC/SRAM
WRITE	=%00010010	; write RTCC/SRAM

	; --------------------------
	; test SRAM

	.(
	lda #$20
	jsr r2reg
	stx backup
	sty backup+1

	lda pattrn
	tax
	eor #$ff
	tay
	lda #$20
	jsr w2reg

	lda #$20
	jsr r2reg
	cpx pattrn
	bne sramerr
	tya
	eor #$ff
	cmp pattrn
	bne sramerr

	ldx backup
	ldy backup+1
	lda #$20
	jsr w2reg

	jmp rtcc		; OK for SRAM

sramerr	lda #$00
	ldy #$16		; "BAD"
	jsr badout		; l7c8

	jsr spout
	lda #"R"
	jsr chrout
	jsr spout

	lda pattrn
	jsr hexout
	lda #$20
	jsr r2reg
	tya
	jsr hexout
	txa
	jsr hexout
	rts
	.)

	; --------------------------
	; test RTCC
rtcc	.(

	; init clock
	lda #1
	sta cntr2		; init wait timer

	ldy #0			; register 0+1
	jsr r1reg
	sta comp		; value to compare
	iny
	jsr r1reg
	tax
	bmi tloop		; is already running

	; enable battery backup
	ldy #4
	jsr r1reg
	ora #8
	jsr w1reg

	ldy #8
	jsr r1reg
	lda #64			; alm_no + sqwen + clko_01
	jsr w1reg

	ldy #1
	jsr r1reg
	ora #$80		; start clock
	jsr w1reg

	; wait for init
	lda #30
	sta cntr2

tloop	.(
	lda #0
	sta cntr		; count
	sta cntr+1		; count
tl0
	lda #0
	jsr r2reg

	inc cntr
	bne tl1
	inc cntr+1
	bne tl1
	lda cntr2
	beq bad

tl1 	cpy comp
	beq tl0
	sty comp

	dec cntr2
	bne tloop
	.)

	lda #0
	sta cntr
	sta cntr+1

tloop2	lda #0
	jsr r2reg
	cpy comp
	bne xloop
	inc cntr
	bne tloop2
	inc cntr+1
	bne tloop2
bad
	lda #$00
	ldy #$16
	jsr badout
	jsr spout
	lda #"T"
	jsr chrout
	lda comp
	jsr hexout
	lda cntr+1
	jsr hexout
	lda cntr
	jsr hexout
	rts
	
xloop	lda cntr+1
	;cmp #1			; @ 4 MHz
	cmp #4			; @ 12 Mhz
	bne bad
	lda cntr
	;cmp #$99		: @ 4 MHz
	cmp #0			; @ 12 MHz
	bcc bad
	;cmp #$aa		; @ 4 MHz
	cmp #2			; @ 12 MHz
	bcs bad
	jmp okout
	.)

	; ------------------------------------------------------------
	; access routines for the RTC chip. 
	; using the SPI routines
	;
	; note that the test program may run with 12MHz
	; and the SPI clock runs with 6 MHz to accomodate the 
	; maximum SPI clock speed of the RTC chip
	; So, to transfer 8 bits at 6MHz, we need 1.3 usec,
	; which is 16 clock cycles, or 8 NOPs between access.
w2reg	.(
	pha
	lda #5
	sta SPICTRL
	lda #WRITE
	sta SPIDATA
	pla
	nop
	nop
	nop
	nop
	nop
	nop			; wait for SPI transfer at 4 MHz
	sta SPIDATA		; address first byte (from AC)
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	sty SPIDATA		; write first data byte 
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	stx SPIDATA		; write second data byte
	nop
	nop
	nop
	nop
	nop
	nop
	lda #0
	sta SPICTRL		; deselect
	rts
	.)


	; YR= reg#, AC= data
w1reg	.(
	pha
	lda #5
	sta SPICTRL
	lda #WRITE
	sta SPIDATA
	nop
	nop
	nop
	nop
	nop
	nop
	nop			; wait for SPI transfer at 4 MHz
	sty SPIDATA		; address first byte (from AC)
	nop
	nop
	nop
	nop
	nop
	nop
	pla
	sta SPIDATA		; write first data byte 
	nop
	nop
	nop
	nop
	nop
	nop
	lda #0
	sta SPICTRL		; deselect
	rts
	.)

r2reg	.(
	pha
	lda #5
	sta SPICTRL
	lda #READ
	sta SPIDATA
	pla
	nop
	nop
	nop
	nop
	nop
	nop
	sta SPIDATA		; address first byte
	nop
	nop
	nop
	nop
	nop
	nop
	lda #0
	sta SPIDATA		; trigger first data byte transfer
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	ldy SPIDATA		; read data and trigger next transfer
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	ldx SPIPEEK		; read second (last) byte
	sta SPICTRL		; deselect
	rts
	.)

	; YR= reg#, out -> AC=data, YR unmodified
r1reg	.(
	lda #5
	sta SPICTRL
	lda #READ
	sta SPIDATA
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	sty SPIDATA		; address first byte
	nop
	nop
	nop
	nop
	nop
	nop
	lda #0
	sta SPIDATA		; trigger first data byte transfer
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	sta SPICTRL		; deselect
	lda SPIPEEK		; read last byte
	rts
	.)

backup	.byt 0,0
cntr	=backup
comp	.byt 0
cntr2	.byt 0
	.)


