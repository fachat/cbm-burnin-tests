

test_up_rtc:
	; ----------------------------------
	; Micro-PET RTC 
	;
	; This test probes the RTC chip on the Micro-PET.
	; The test uses two bytes of the SRAM (which are
	; saved and restored), and the 1/100 counter to
	; check the clock.
	;
	.(

SPICTRL	=$e808
SPIDATA	=$e809
SPIPEEK	=$e80a

READ	=%00010011	; read RTCC/SRAM
WRITE	=%00010010	; write RTCC/SRAM

	; --------------------------
	; test SRAM

	.(
	lda #$20
	jsr rdreg
	stx backup
	sty backup+1

	lda pattrn
	tax
	eor #$ff
	tay
	lda #$20
	jsr wrreg

	lda #$20
	jsr rdreg
	cpx pattrn
	bne sramerr
	tya
	eor #$ff
	cmp pattrn
	bne sramerr

	ldx backup
	ldy backup+1
	lda #$20
	jsr wrreg

	jmp rtcc		; OK for SRAM

sramerr	lda #$00
	ldy #$16		; "BAD"
	jsr badout		; l7c8

	jsr spout
	lda #"R"
	jsr chrout
	jsr spout

	lda pattrn
	jsr hexout
	lda #$20
	jsr rdreg
	tya
	jsr hexout
	txa
	jsr hexout
	rts
	.)

	; --------------------------
	; test RTCC
rtcc	.(
	; init clock
	lda #1
	sta cntr2		; init wait timer

	lda #0			; register 0+1
	jsr rdreg
	sty comp		; value to compare
	txa
	bmi tloop		; is already running
	ora #128		; enable clock
	tax
	lda #0
	jsr wrreg		; start clock

	; wait for init
	lda #30
	sta cntr2

tloop	.(
	lda #0
	sta cntr		; count
	sta cntr+1		; count
tl0
	lda #0
	jsr rdreg

	inc cntr
	bne tl1
	inc cntr+1
	bne tl1
	lda cntr2
	beq bad

tl1 	cpy comp
	beq tl0
	sty comp

	dec cntr2
	bne tloop
	.)

	lda #0
	sta cntr
	sta cntr+1

tloop2	lda #0
	jsr rdreg
	cpy comp
	bne xloop
	inc cntr
	bne tloop2
	inc cntr+1
	bne tloop2
bad
	lda #$00
	ldy #$16
	jsr badout
	jsr spout
	lda #"T"
	jsr chrout
	lda comp
	jsr hexout
	lda cntr+1
	jsr hexout
	lda cntr
	jsr hexout
	rts
	
xloop	lda cntr+1
	cmp #1
	bne bad
	lda cntr
	cmp #$99
	bcc bad
	cmp #$aa
	bcs bad
	jmp okout
	.)

	; --------------------------
wrreg	.(
	pha
	lda #5
	sta SPICTRL
	lda #WRITE
	sta SPIDATA
	pla
	nop
	nop
	nop			; wait for SPI transfer at 4 MHz
	sta SPIDATA		; address first byte (from AC)
	nop
	nop
	nop
	nop
	sty SPIDATA		; write first data byte 
	nop
	nop
	nop
	nop
	stx SPIDATA		; write second data byte
	nop
	nop
	nop
	lda #0
	sta SPICTRL		; deselect
	rts
	.)

rdreg	.(
	pha
	lda #5
	sta SPICTRL
	lda #READ
	sta SPIDATA
	pla
	nop
	nop
	nop
	sta SPIDATA		; address first byte
	nop
	nop
	nop
	lda #0
	sta SPIDATA		; trigger first data byte transfer
	nop
	nop
	nop
	nop
	ldy SPIDATA		; read data and trigger next transfer
	nop
	nop
	nop
	nop
	ldx SPIPEEK		; read second (last) byte
	sta SPICTRL		; deselect
	rts
	.)

backup	.byt 0,0
cntr	=backup
comp	.byt 0
cntr2	.byt 0
	.)


