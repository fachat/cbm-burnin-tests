
test_ultra_speed:
	; ----------------------------------
	; Micro-/Ultra-PET speed (FPGA)
	;
	; test works by running in interrupt routine
	; on the VSYNC signal input (PIA1 CB1). Counts
	; time between interrupts, checks diff.
	; Note that counter $25/YR is initialized
	; only at the very beginning, so 2nd pass
	; counter snapshop stores value + value 
	; from 1st pass. Therefore need to subtract them.
	;
	; note: borrows measure routing from pet/test_50hz
	;
	.(

; 17.5M system clock
;TARGET_1M	=$0334
;TARGET_2M	=$066f
;TARGET_4M	=$0ce5
;TARGET_FULL	=$33a8

; 13.5M system clock
TARGET_1M	=$0386
TARGET_2M	=$0712
TARGET_4M	=$0e2a	; e2b
TARGET_FULL	=$2fdf

	lda #0		; 1 MHz
	sta $e803
	jsr measure50hz

	; target counter $0334, $0335, ... $0336
	lda ptr1+1
	cmp #>TARGET_1M		; hi byte difference is 3?
	bne l14d6		; no, then error
	lda ptr1		; low byte is 
	sbc #<TARGET_1M
	cmp #$3			; account for jitter
	bcs l14d6		; no then error
	
	lda #1		; 2 MHz
	sta $e803
	jsr measure50hz

	; target counter $0670, $0671, ... $0674
	lda ptr1+1
	cmp #>TARGET_2M		; hi byte difference is 6?
	bne l14d6		; no, then error
	lda ptr1		; low byte is 
	sbc #<TARGET_2M		;
	cmp #5			; account for jitter
	bcs l14d6		; no then error

	lda #2		; 4 MHz
	sta $e803
	jsr measure50hz

	; target counter $0ce5, $0ce6, ... $0ce9
	lda ptr1+1
	cmp #>TARGET_4M		; hi byte difference is 12?
	bne l14d6		; no, then error
	lda ptr1		; low byte is 
	sbc #<TARGET_4M
	cmp #$5			; account for jitter
	bcs l14d6		; no then error

	lda #3		; 17 MHz
	sta $e803
	jsr measure50hz

	; target counter $33a8, ... $33ad
	lda ptr1+1
	cmp #>TARGET_FULL	; hi byte difference 
	bne l14d6		; no, then error
	lda ptr1		; low byte is 
	sbc #<TARGET_FULL
	cmp #$5			; account for jitter
	bcs l14d6		; no then error
ok
	jsr okout		; OK
	bne l14dd

l14d6 	lda #$00
	ldy #$16		; "BAD"
	jsr badout		; l7c8

	jsr spout
	lda $e803
	jsr hexout
	lda ptr1+1
	jsr hexout
	lda ptr1
	jsr hexout

;
l14dd	
	lda #UPET_RUNSPEED	; default speed
	sta $e803

	lda #$34		; output CB2, direct control via CRB.3, set CB2 low
	sta $e813		; store in CRB
	bit $e810		; check PA - clr interrupt on CAx?

	rts
	.)


