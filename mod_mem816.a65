
	; --------------------------------------
	; test memory
	; set with pattern
	;
	; returns with z=1 when ok
	; returns with z=0 on first error
	; then:
	; ac=broken bit
	; x/y=address (x hi, y lo)
	; c=0 is read unstable, c=1 write unstable
	; ptr1+0/1/2 = bank address of failure
	;
	; input a=start bank, x=end bank +1
memtest816 .(

ptr1b	=ptr2			; bank for ptr1
tmp2	=ptr2+1

startb	=memp1			; start bank
endb	=memp1+1		; end bank


	; bank
	sta startb
	stx endb
	; native mode
	clc
	xce

	ldy #$00
	sty ptr1
	tya

xorlp	sta cnt			; XOR counter (only $00, $ff are used)

	.(
	lda startb
	sta ptr1b
	lda #0			; start page
	sta ptr1+1		; actual ptr hi

stloop	clc
	tya			; index in page
	adc ptr1+1		; add page number
	adc pattrn		; add ???
	eor ptr1b		; bank #
	eor cnt 		; XOR counter
	sta [ptr1],y
	iny
	bne stloop		; next byte

	inc ptr1+1		; next page
	bne stloop

	inc ptr1b
	lda ptr1b
	cmp endb
	bne stloop
	.)
	; check pattern
	
mcheck 	.(
	lda startb
	sta ptr1b
	lda #0
	sta ptr1+1

chklp	clc
	tya
	adc ptr1+1
	adc pattrn
	eor cnt 
	eor ptr1b		; bank #
	sta tmp2
	eor [ptr1],y
	bne merr		; wrong value
	iny
	bne chklp		; next byte

	inc ptr1+1		; next page
	bne chklp

	inc ptr1b
	lda ptr1b
	cmp endb
	bne chklp
	.)

	lda cnt 
	eor #$ff		; is XOR through?
	bne xorlp		; no, try next
	beq exit

merr	; analyze error
	pha			; save bit
	lda tmp2
	eor [ptr1],y		; check again
	beq rderr		; read unstable
	sec
	.byt $24
rderr	clc
	ldx ptr1+1		; high byte, y already has low byte of addr
	pla			; restore bit
exit	
	php
	sec
	xce
	plp
	rts
	.)


