
test_ieee:
	;---------------------------------------
	;
	; IEEE 488 BUS
	;
	; The control lines are mapped as:
	; 	bit 7: DAV
	; 	bit 6: NRFD
	; 	bit 5: EOI
	; 	bit 4: ATN
	; 	bit 3-1:
	; 	bit 0: NDAC
	;
	; The test outputs "D" when a drive
	; is detected.
	.(
isdrv	=ptr1

	; init IEEE488

	lda #$00
	tay
	sta $e823	; PIA2 CRB (DAV out, SRQ in) - access DDRB
	sta $e821	; PIA2 CRA (NDAC out, ATN in) - access DDRA
	sta $e820	; PIA2 PA to input (IEEE data in)
	lda #$ff
	sta $e822	; PIA2 PB to output (IEEE data out)
	lda #$34
	sta $e823	; PIA2 CRB, access DRB, CB2 low, CB1 input
	sta $e821	; PIA2 CRA, access DRA, CA2 low, CA1 input

	; --------------------------------
	; check IEEE488

	; 1st test: data bits
	; loop data values on IEEE data out (start with Y=0)
l13ee	sty $e822	; PIA2 IEEE data out
	nop
	cpy $e820	; check IEEE data in
	bne dataerrx	; not equal -> error
l13f7	iny
	bne l13ee

	; --------------------------------
	; 2nd test: iterate control lines
	;

	; first check if we have a drive attached
	;
	ldy #0
	sty isdrv
	iny
	jsr setieee
	jsr chkieee
	dey
	cpy tmp1
	bne orig

	lda #"D"
	jsr chrout
	jsr spout
	
	dec isdrv

	; ---------	
orig
l13fa	ldy #$00	; running state
l13fc	jsr setieee	; set state of IEEE I/O
	jsr chkieee	; check state of IEEE I/O
	tya
	eor tmp1	; XOR target bit
	and #$f1	; check error bits
	bne ctrlerr
next	iny		; next IEEE state
	bne l13fc
l140c	jsr okout	; l7db
	bne exit

dataerrx 
	bne dataerr

	; error in IEEE
	; convert state bits to error number
ctrlerr	tax
	bit isdrv
	bpl cerr1

	; filter out errors due to drive reacting to ATN
	and #$10	; filter ATN and NDAC
	bne cerr1	; no ATN
	txa
	and #$41	; NRFD, NDAC
	bne next	; errors in NRFD and NDAC are ignored
cerr1
	tya
	jsr hexout
	txa
	jsr hexout
	jsr spout

	txa
	ldx #$08
l1413	asl
	beq l1419
l1416	dex
	bpl l1413

l1419	ldy #$00
	cpx #$07
	beq l140c	; error 7 is OK (NRFD?)

l141f	lda #$12	; REV output
	jsr chrout	; l742

	; search for correct string through list of nul-terminated strings
l1424	lda ieeestr,y	; l92b,y
	iny
	cmp #$00
	bne l1424
l142c	dex
	bne l1424

	; output error string
l142f	lda ieeestr,y
	beq l143a
l1434	jsr chrout
	iny
	bne l142f

l143a	lda #$20	; space
	jsr chrout
	ldy #$16		; "BAD"
	jsr badout
	bne exit

	; entry on data error on IEEE init
dataerr	tya
	eor $e820
	ldy #$1a		; "IEEE BAD IO"
	ldx #$39
	jsr badbit2	; l7c3

exit	rts


	; -----------------------------------------------------------
	; gather state of the IEEE 488 bus and set into tmp1
	; 
	; bit 7: DAV
	; bit 6: NRFD
	; bit 5: EOI
	; bit 4: ATN
	; bit 3-1:
	; bit 0: NDAC
chkieee	.(
	lda $e840	; VIA PB
	and #$c1	; 7=DAVin, 6=NRFDin, 0=NDACin
	sta tmp1
	lda $e810	; PIA1 PA, PA6=EOIin
	lsr
	and #$20	; 5=EOIin
	ora tmp1
	sta tmp1

	; we cannot check ATNIN directly, it's only on an interrupt input
	lda $e821	; PIA2 CRA, check ATN int
	and #$02
	eor #$02
	asl
	asl
	asl
	asl
	asl
	asl
	eor $e821
	lsr
	lsr
	lsr
	and #$10	; 4= ATN
	ora tmp1
	sta tmp1
	rts
	.)

	; -----------------------------------------------------------
	; set the state of the IEEE488 bus to what is given in YR
	; 
	; bit 7: DAV
	; bit 6: NRFD
	; bit 5: EOI
	; bit 4: ATN
	; bit 3-1: unused 
	; bit 0: NDAC
setieee	.(
	tya
	and #$80	; shall we set DAV?
	php		; remember
	lda #$1e	; 4=Cass Mtr out, 3=Cass write, 2=ATNout, 1=NRFD out, 0=NDACout
	sta $e842	; VIA DDRB

	lda #$34	; DAV low
	plp
	beq l17d0
l17ce	ora #$08	; set CA2 out hi (DAV)
l17d0	sta $e823	; PIA2 CRB

	tya
	and #$40	; shall we set NRFD?
	beq l17da
l17d8	lda #$02	; NRFD 
l17da	sta $e840	; set 

	tya
	and #$20	; shall we set EOI?
	php
	lda #$34	; CA2 low
	plp
	beq l17e8
l17e6	ora #$08	; or high
l17e8	sta $e811	; PIA1 CRA -> EOI out

	tya
	and #$01	; shall we set NDAC?
	php
	lda #$34	; CA2 low
	plp
	beq l17f6
l17f4	ora #$08	; or high
l17f6	sta cnt		; target CRA value for NDAC

	; ATNIN is on an interrupt input, so we need
	; to check if we get the appropriate level change
	; interrupts when we change it

	; set ATN line to opposite value, so we sure trigger in int
	tya
	and #$10	; shall we set ATN?
	php
	lda $e840	; VIA PA
	and #$fb	; mask out ATNout
	plp
	bne l1806
	ora #$04	; set it
l1806	sta $e840

	; set interrupt check either on falling or rising edge
	tya
	and #$10	; shall we set ATN?
	php
	lsr
	lsr
	lsr		; shift into bit1, selecting CA1 pos/neg edge
	ora cnt		; or that with the NDAC target
	sta $e821	; set NDAC and ATN detection

	; and set ATN to correct value to trigger interrupt
	lda $e840
	and #$fb	; set ATN bit...
	plp
	beq l181f	; ... to correct value ...
	ora #$04
l181f	sta $e840	; ... so we are sure we trigger in IRQ edge
	rts
	.)

        ; ---------------------
        ; IEEE error texts
ieeestr
        .byt $00,
        ; error 1
        .byt "ND"               ; $4e,$44
        .byt "AC",0             ; $41,$43,$00
        ; error 2
        .byt $00,
        ; error 3
        .byt $00
        ; error 4
        .byt $00
        ; error 5
        .byt "ATN"              ; $41,$54,$4e
        .byt $00
        ; error 6
        .byt "EO"               ; $45,$4f
        .byt "I",0
        ; error 7
        .byt "N"                ; $49,$00,$4e
        .byt "RFD"              ; $52,$46,$44
        .byt $00
        ; error 8
        .byt "DA"               ; $44,$41
        .byt "V",0

	.)


